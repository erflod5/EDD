// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest

#include <unordered_map>
#include <ngrest/common/HttpException.h>
#include "Practica_1.h"

Lista milist;
PilaRecurso pila;
ColaServicio cola;

std::string Practica_1::newUser(const usuario & user){
	std::string result;
	NGREST_ASSERT_HTTP(user.nombre!="" && user.id!="" && user.correo !="" && user.fecha!="", ngrest::HTTP_STATUS_400_BAD_REQUEST, "Campos Vacios");	
	Nodo* nuevo = milist.insertar(user);	
	if(nuevo==NULL) return "Bad Request";
	return "ok";
}

std::string Practica_1::newRecurso(const recurso & rec){	
	pila.Push(rec);
	return "ok";
}


std::list<usuario> Practica_1::getUsuarios(){	
	return milist.linealizar();
}

std::list<servicio> Practica_1::getColaServicio(){
	return cola.linealizar();
}

servicio Practica_1::getRecurso(const std::string &id){
	Nodo* buscar = milist.buscar(id);

	NGREST_ASSERT_HTTP(pila.estaVacia()!=true , ngrest::HTTP_STATUS_409_CONFLICT, "Pila Vacia");

	NGREST_ASSERT_HTTP(buscar!=NULL , ngrest::HTTP_STATUS_404_NOT_FOUND, "User not found");
	
	servicio s;
	recurso r = pila.Pop();
	
	s.idUsuario = buscar->getUsuario().id;
	s.contenido = r.contenido;
	s.tipo = r.tipo;
	s.idSesion = cola.getVarSesion();
	
	cola.encolar(s);
	return s;	
}

std::string Practica_1::prueba(){
	usuario *user = milist.getUser("1");

	if(user==NULL) return "false";
	return "true";
}

