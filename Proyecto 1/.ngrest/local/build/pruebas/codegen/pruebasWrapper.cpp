// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest
// DO NOT EDIT. ANY CHANGES WILL BE LOST

#include <ngrest/utils/Log.h>
#include <ngrest/utils/fromcstring.h>
#include <ngrest/utils/tostring.h>
#include <ngrest/utils/Exception.h>
#include <ngrest/common/ObjectModel.h>
#include <ngrest/common/ObjectModelUtils.h>
#include <ngrest/common/Message.h>
#include <ngrest/common/HttpMethod.h>
#include <ngrest/common/Service.h>
#include <ngrest/engine/ServiceDescription.h>
#include "pruebasWrapper.h"





pruebasWrapper::pruebasWrapper():
    service(new pruebas())
{
}

pruebasWrapper::~pruebasWrapper()
{
    delete service;
}


::ngrest::Service* pruebasWrapper::getServiceImpl()
{
    return service;
}

void pruebasWrapper::invoke(const ::ngrest::OperationDescription* operation, ::ngrest::MessageContext* context)
{
    if (operation->name == "echo") {   //  **************** echo *****************

        /// std::string echo(const std::string& text);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for pruebas/echo");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        std::string text;

        ::ngrest::ObjectModelUtils::getChildValue(request, "text", text);
/// ######### deserialize request end ###########

        const std::string& result = service->echo(text);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else {
        NGREST_THROW_ASSERT("No operation " + operation->name + " found in service pruebas");
    }
}

const ::ngrest::ServiceDescription* pruebasWrapper::getDescription() const
{
    static ::ngrest::ServiceDescription description = {
        "pruebas", // name
        "pruebas", // location
        R"(Dummy description for the service)", // description
        R"(Some detailed description of the service)", // details
        {
            {
                "echo",             // name
                "/{text}", // location
                static_cast<int>(::ngrest::HttpMethod::GET),
                "GET",
                false,
                R"(Dummy description for the operation)", // description
                R"(Some detailed description of the operation)", // details
                {
                    {"text", ::ngrest::ParameterDescription::Type::String, false}
                },
                ::ngrest::ParameterDescription::Type::String, false
            }
        }
    };

    return &description;
}



